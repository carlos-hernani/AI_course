if (!require("pacman")) install.packages("pacman")
knitr::opts_chunk$set(echo = TRUE)
# The pacman package is an R package management tool https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html
if (!require("pacman")) install.packages("pacman")
needed_packages <- c("")
# Loads and install packages
pacman::p_load(needed_packages)
if (TRUE) "the action of the TRUE statement"
if (FALSE) "the action of the TRUE statement" else "the action of the FALSE statement"
if (TRUE) "the action of the TRUE statement"
if (FALSE) "the action of the TRUE statement" else "the action of the FALSE statement"
# array of ages of people attending a party; only >18 will be served alcoholic drinks
ages <- sample.int(10, 40)
# array of ages of people attending a party; only >18 will be served alcoholic drinks
ages <- sample.int(50, 10)
ifelse(ages>18, "Will be served alcohol", "Will Not be served alcohol")
knitr::opts_chunk$set(echo = TRUE)
# The pacman package is an R package management tool https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html
if (!require("pacman")) install.packages("pacman")
needed_packages <- c("glue")
# Loads and install packages
pacman::p_load(needed_packages)
# array of ages of people attending a party; only >18 will be served alcoholic drinks
ages <- sample.int(50, 10)
ifelse(ages>18, "Will be served alcohol", glue("Will Not be served alcohol. Age {as.character(ages)}"))
knitr::opts_chunk$set(echo = TRUE)
# The pacman package is an R package management tool https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html
if (!require("pacman")) install.packages("pacman")
needed_packages <- c("glue")
# Loads and install packages
pacman::p_load(needed_packages)
knitr::opts_chunk$set(echo = TRUE)
# The pacman package is an R package management tool https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html
if (!require("pacman")) install.packages("pacman")
needed_packages <- c("glue")
# Loads and install packages
pacman::p_load(needed_packages,character.only=TRUE)
# array of ages of people attending a party; only >18 will be served alcoholic drinks
ages <- sample.int(50, 10)
ifelse(ages>18, "Will be served alcohol", glue("Will Not be served alcohol. Age {as.character(ages)}"))
# array of ages of people attending a party; only >18 will be served alcoholic drinks
ages <- sample.int(50, 10)
ifelse(ages>=18, "Will be served alcohol", glue("Will Not be served alcohol. Age {as.character(ages)}"))
# array of ages of people attending a party; only >18 will be served alcoholic drinks
ages <- sample.int(50, 10)
ifelse(ages>=18, glue("Will be served alcohol. Age {as.character(ages)}"), glue("Will Not be served alcohol. Age {as.character(ages)}"))
# array of ages of people attending a party; only >18 can be served alcoholic drinks
ages <- sample.int(50, 10)
ifelse(ages>=18, glue("Can be served alcohol. Age {as.character(ages)}"), glue("Will Not be served alcohol. Age {as.character(ages)}"))
grade <- 90
if (grade >= 90){
"A"
}else if (x > 80){
"B"
}else if (x > 50){
"C"
}else{
"F"
}
grade <- "F"
switch(grade,
A = "great job",
B = "good job",
C = "ok job",
F = "try harder next time",
stop("Unexpected value.")
)
knitr::opts_chunk$set(echo = TRUE)
# The pacman package is an R package management tool https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html
if (!require("pacman")) install.packages("pacman")
needed_packages <- c("glue", "dplyr")
# Loads and install packages
pacman::p_load(needed_packages,character.only=TRUE)
# case_when allows vectorised input and multiple conditions
x <- 1:10
dplyr::case_when(
x %% 35 == 0 ~ "fizz buzz",
x %% 5 == 0 ~ "fizz",
x %% 7 == 0 ~ "buzz",
is.na(x) ~ "???",
TRUE ~ as.character(x)
)
#>  [1] "1"    "2"    "3"    "4"    "fizz" "6"    "buzz" "8"    "9"    "fizz"
# case_match is a vectorised switch
notes <- c("Do", "Re", "Mi", "Fa", "Sol", "La", "Si", "Sib")
dplyr::case_match(x,
"Do"~ "C",
"Re"~ "D",
"Mi"~ "E",
"Fa"~ "F",
"Sol"~ "G",
"La"~ "A",
"Si"~ "B",
#.default = "other"
)
# case_match is a vectorised switch
notes <- c("Do", "Re", "Mi", "Fa", "Sol", "La", "Si", "Sib")
dplyr::case_match(x,
"Do"~ "C",
"Re"~ "D",
"Mi"~ "E",
"Fa"~ "F",
"Sol"~ "G",
"La"~ "A",
"Si"~ "B"
#.default = "other"
)
# case_match is a vectorised switch
notes <- c("Do", "Re", "Mi", "Fa", "Sol", "La", "Si", "Sib")
dplyr::case_match(x,
"Do"~ "C",
"Re"~ "D",
"Mi"~ "E",
"Fa"~ "F",
"Sol"~ "G",
"La"~ "A",
"Si"~ "B",
.default = "other"
)
# case_match is a vectorised switch
notes <- c("Do", "Re", "Mi", "Fa", "Sol", "La", "Si", "Sib")
dplyr::case_match(notes,
"Do"~ "C",
"Re"~ "D",
"Mi"~ "E",
"Fa"~ "F",
"Sol"~ "G",
"La"~ "A",
"Si"~ "B",
.default = "other"
)
# case_match is a vectorised switch
notes <- c("Do", "Re", "Mi", "Fa", "Sol", "La", "Si", "Sib")
dplyr::case_match(notes,
"Do"~ "C",
"Re"~ "D",
"Mi"~ "E",
"Fa"~ "F",
"Sol"~ "G",
"La"~ "A",
"Si"~ "B",
#.default = "other"
)
# case_match is a vectorised switch
notes <- c("Do", "Re", "Mi", "Fa", "Sol", "La", "Si", "Sib")
dplyr::case_match(notes,
"Do"~ "C",
"Re"~ "D",
"Mi"~ "E",
"Fa"~ "F",
"Sol"~ "G",
"La"~ "A",
"Si"~ "B",
#.default = "outside the written possibilities; use default to handle it"
)
ages <- c("29", NA)
ifelse(ages>=18, glue("Can be served alcohol. Age {as.character(ages)}"), glue("Will Not be served alcohol. Age {as.character(ages)}"))
# if_else can handle NA
if_else(ages>=18, glue("Can be served alcohol. Age {as.character(ages)}"), glue("Will Not be served alcohol. Age {as.character(ages)}"), missing = "missing age")
for (i in 1:10) {
i**2
}
for (i in 1:10) {
print(i**2)
}
i <- "Check this"
print(glue("i has initialvalue {i}"))
for (i in 1:10) {
print(i**2)
}
i <- "Check this"
print(glue("i has an initial value {i}"))
for (i in 1:10) {
print(i**2)
}
print(glue("i has a final value {i}"))
# list of passengers with the possibility of an infected contagious person, if present the passenger has to get out of the plane
possibilities <- c("OK", "Infected")
sample(possibilities, 100, replace = TRUE, prob=c(90,10))
# list of passengers with the possibility of an infected contagious person,
possibilities <- c("OK", "Mildly Contagious", "Extremely Contagious")
passengers_status <- sample(possibilities, 100, replace = TRUE, prob=c(90,9,1)) # 10 percent infected
for (status in passengers_status) {
if (status == "OK") next
if (status == "Mildly Contagious"){
print("Get out of the plane")
}
if (status == "Extremely Contagious"){
print("Trip cancelled")
break
}
}
# list of passengers with the possibility of an infected contagious person,
possibilities <- c("OK", "Mildly Contagious", "Extremely Contagious")
passengers_status <- sample(possibilities, 100, replace = TRUE, prob=c(90,9,1)) # 10 percent infected
for (status in passengers_status) {
if (status == "OK") next
if (status == "Mildly Contagious"){
print("Get out of the plane")
}
if (status == "Extremely Contagious"){
print("Trip cancelled")
break
}
}
passengers_status
# list of passengers with the possibility of an infected contagious person,
possibilities <- c("OK", "Mildly Contagious", "Extremely Contagious")
passengers_status <- sample(possibilities, 100, replace = TRUE, prob=c(90,9,1)) # 10 percent infected
for (status in passengers_status) {
if (status == "OK") next
if (status == "Mildly Contagious"){
print("Get out of the plane")
}
if (status == "Extremely Contagious"){
print("Trip cancelled")
break
}
}
passengers_status
# list of passengers with the possibility of an infected contagious person,
possibilities <- c("OK", "Mildly Contagious", "Extremely Contagious")
passengers_status <- sample(possibilities, 100, replace = TRUE, prob=c(90,9,1)) # 10 percent infected
for (status in passengers_status) {
if (status == "OK") next
if (status == "Mildly Contagious"){
print("Get out of the plane")
}
if (status == "Extremely Contagious"){
print("Trip cancelled")
break
}
}
passengers_status
# list of passengers with the possibility of an infected contagious person,
possibilities <- c("OK", "Mildly Contagious", "Extremely Contagious")
passengers_status <- sample(possibilities, 100, replace = TRUE, prob=c(90,9,1)) # 10 percent infected
for (status in passengers_status) {
if (status == "OK") next
if (status == "Mildly Contagious"){
print("Get out of the plane")
}
if (status == "Extremely Contagious"){
print("Trip cancelled")
break
}
}
passengers_status
knitr::opts_chunk$set(echo = TRUE)
